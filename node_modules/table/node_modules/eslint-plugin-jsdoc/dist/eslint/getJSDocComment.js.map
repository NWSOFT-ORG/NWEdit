{"version":3,"sources":["../../src/eslint/getJSDocComment.js"],"names":["isCommentToken","token","type","decoratorMetaTokens","Map","getDecorator","sourceCode","tokenClose","value","tokenOpen","get","nested","tokenBefore","getTokenBefore","includeComments","looksLikeExport","astNode","getTSFunctionComment","parent","grandparent","greatGrandparent","greatGreatGrandparent","invokedExpression","Set","allowableCommentNode","getReducedASTNode","node","has","getCommentsBefore","length","test","findJSDocComment","settings","minLines","maxLines","currentNode","decorator","charAt","loc","start","line","end","getJSDocComment","reducedNode"],"mappings":"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","sourcesContent":["/**\n * Obtained originally from {@link https://github.com/eslint/eslint/blob/master/lib/util/source-code.js#L313}\n *\n * @license MIT\n */\n\n/**\n * Checks if the given token is a comment token or not.\n *\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a comment token.\n */\nconst isCommentToken = (token) => {\n  return token.type === 'Line' || token.type === 'Block' || token.type === 'Shebang';\n};\n\nconst decoratorMetaTokens = new Map([[')', '('], ['>', '<']]);\n\nconst getDecorator = (token, sourceCode) => {\n  if (!token) {\n    return false;\n  }\n  if (token.type === 'Punctuator') {\n    const tokenClose = token.value;\n    const tokenOpen = decoratorMetaTokens.get(tokenClose);\n    if (tokenOpen) {\n      let nested = 0;\n      let tokenBefore = token;\n      do {\n        tokenBefore = sourceCode.getTokenBefore(tokenBefore, {includeComments: true});\n        // istanbul ignore if\n        if (tokenBefore && tokenBefore.type === 'Punctuator') {\n          if (tokenBefore.value === tokenClose) {\n            nested++;\n          }\n          if (tokenBefore.value === tokenOpen) {\n            if (nested) {\n              nested--;\n            } else {\n              break;\n            }\n          }\n        }\n      } while (tokenBefore);\n\n      return tokenBefore;\n    }\n  }\n\n  if (token.type === 'Identifier') {\n    const tokenBefore = sourceCode.getTokenBefore(token, {includeComments: true});\n    if (tokenBefore && tokenBefore.type === 'Punctuator' && tokenBefore.value === '@') {\n      return tokenBefore;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Check to see if its a ES6 export declaration.\n *\n * @param {ASTNode} astNode An AST node.\n * @returns {boolean} whether the given node represents an export declaration.\n * @private\n */\nconst looksLikeExport = function (astNode) {\n  return astNode.type === 'ExportDefaultDeclaration' || astNode.type === 'ExportNamedDeclaration' ||\n    astNode.type === 'ExportAllDeclaration' || astNode.type === 'ExportSpecifier';\n};\n\nconst getTSFunctionComment = function (astNode) {\n  const {parent} = astNode;\n  const grandparent = parent.parent;\n  const greatGrandparent = grandparent.parent;\n  const greatGreatGrandparent = greatGrandparent && greatGrandparent.parent;\n\n  // istanbul ignore if\n  if (parent.type !== 'TSTypeAnnotation') {\n    return astNode;\n  }\n\n  switch (grandparent.type) {\n  case 'ClassProperty':\n  case 'TSDeclareFunction':\n  case 'TSMethodSignature':\n  case 'TSPropertySignature':\n    return grandparent;\n  case 'ArrowFunctionExpression':\n    // istanbul ignore else\n    if (\n      greatGrandparent.type === 'VariableDeclarator'\n\n    // && greatGreatGrandparent.parent.type === 'VariableDeclaration'\n    ) {\n      return greatGreatGrandparent.parent;\n    }\n\n    // istanbul ignore next\n    return astNode;\n  case 'FunctionExpression':\n    // istanbul ignore else\n    if (greatGrandparent.type === 'MethodDefinition') {\n      return greatGrandparent;\n    }\n\n  // Fallthrough\n  default:\n    // istanbul ignore if\n    if (grandparent.type !== 'Identifier') {\n      // istanbul ignore next\n      return astNode;\n    }\n  }\n\n  // istanbul ignore next\n  switch (greatGrandparent.type) {\n  case 'ArrowFunctionExpression':\n    // istanbul ignore else\n    if (\n      greatGreatGrandparent.type === 'VariableDeclarator' &&\n      greatGreatGrandparent.parent.type === 'VariableDeclaration'\n    ) {\n      return greatGreatGrandparent.parent;\n    }\n\n    // istanbul ignore next\n    return astNode;\n  case 'FunctionDeclaration':\n    return greatGrandparent;\n  case 'VariableDeclarator':\n    // istanbul ignore else\n    if (greatGreatGrandparent.type === 'VariableDeclaration') {\n      return greatGreatGrandparent;\n    }\n\n    // Fallthrough\n  default:\n    // istanbul ignore next\n    return astNode;\n  }\n};\n\nconst invokedExpression = new Set(['CallExpression', 'OptionalCallExpression', 'NewExpression']);\nconst allowableCommentNode = new Set([\n  'VariableDeclaration',\n  'ExpressionStatement',\n  'MethodDefinition',\n  'Property',\n  'ObjectProperty',\n  'ClassProperty',\n]);\n\n/* eslint-disable complexity */\n/**\n * Reduces the provided node to the appropriate node for evaluating JSDoc comment status.\n *\n * @param {ASTNode} node An AST node.\n * @param {SourceCode} sourceCode The ESLint SourceCode.\n * @returns {ASTNode} The AST node that can be evaluated for appropriate JSDoc comments.\n * @private\n */\nconst getReducedASTNode = function (node, sourceCode) {\n  /* eslint-enable complexity */\n  let {parent} = node;\n\n  switch (node.type) {\n  case 'TSFunctionType':\n    return getTSFunctionComment(node);\n  case 'TSInterfaceDeclaration':\n  case 'TSTypeAliasDeclaration':\n  case 'TSEnumDeclaration':\n  case 'ClassDeclaration':\n  case 'FunctionDeclaration':\n    return looksLikeExport(parent) ? parent : node;\n\n  case 'TSDeclareFunction':\n  case 'ClassExpression':\n  case 'ObjectExpression':\n  case 'ArrowFunctionExpression':\n  case 'TSEmptyBodyFunctionExpression':\n  case 'FunctionExpression':\n    if (\n      !invokedExpression.has(parent.type)\n    ) {\n      while (\n        !sourceCode.getCommentsBefore(parent).length &&\n        !/Function/u.test(parent.type) &&\n        !allowableCommentNode.has(parent.type)\n      ) {\n        parent = parent.parent;\n\n        if (!parent) {\n          break;\n        }\n      }\n      if (parent && parent.type !== 'FunctionDeclaration' && parent.type !== 'Program') {\n        if (parent.parent && parent.parent.type === 'ExportNamedDeclaration') {\n          return parent.parent;\n        }\n\n        return parent;\n      }\n    }\n\n    return node;\n\n  default:\n    return node;\n  }\n};\n\n/**\n * Checks for the presence of a JSDoc comment for the given node and returns it.\n *\n * @param {ASTNode} astNode The AST node to get the comment for.\n * @returns {Token|null} The Block comment token containing the JSDoc comment\n *    for the given node or null if not found.\n * @private\n */\nconst findJSDocComment = (astNode, sourceCode, settings) => {\n  const {minLines, maxLines} = settings;\n  let currentNode = astNode;\n  let tokenBefore = null;\n\n  while (currentNode) {\n    tokenBefore = sourceCode.getTokenBefore(currentNode, {includeComments: true});\n    const decorator = getDecorator(tokenBefore, sourceCode);\n    if (decorator) {\n      currentNode = decorator;\n      continue;\n    }\n    if (!tokenBefore || !isCommentToken(tokenBefore)) {\n      return null;\n    }\n    if (tokenBefore.type === 'Line') {\n      currentNode = tokenBefore;\n      continue;\n    }\n    break;\n  }\n\n  if (\n    tokenBefore.type === 'Block' &&\n    tokenBefore.value.charAt(0) === '*' &&\n    currentNode.loc.start.line - tokenBefore.loc.end.line >= minLines &&\n    currentNode.loc.start.line - tokenBefore.loc.end.line <= maxLines\n  ) {\n    return tokenBefore;\n  }\n\n  return null;\n};\n\n/**\n * Retrieves the JSDoc comment for a given node.\n *\n * @param {SourceCode} sourceCode The ESLint SourceCode\n * @param {ASTNode} node The AST node to get the comment for.\n * @param {object} settings The settings in context\n * @returns {Token|null} The Block comment token containing the JSDoc comment\n *    for the given node or null if not found.\n * @public\n */\nconst getJSDocComment = function (sourceCode, node, settings) {\n  const reducedNode = getReducedASTNode(node, sourceCode);\n\n  return findJSDocComment(reducedNode, sourceCode, settings);\n};\n\nexport {\n  getReducedASTNode, getJSDocComment, getDecorator, findJSDocComment,\n};\nexport default getJSDocComment;\n"],"file":"getJSDocComment.js"}