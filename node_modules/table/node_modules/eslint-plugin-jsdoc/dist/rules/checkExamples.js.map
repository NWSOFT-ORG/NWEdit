{"version":3,"sources":["../../src/rules/checkExamples.js"],"names":["zeroBasedLineIndexAdjust","likelyNestedJSDocIndentSpace","preTagSpaceLength","firstLinePrefixLength","hasCaptionRegex","escapeStringRegexp","str","replace","countChars","ch","match","RegExp","length","getRegexFromString","regexString","flags","regex","uniqueFlags","Set","join","defaultMdRules","defaultExpressionRules","quotes","semi","strict","getLinesCols","text","matchLines","colDelta","slice","lastIndexOf","report","utils","context","globalState","has","set","Map","matchingFileNameMap","get","options","exampleCodeRegex","rejectExampleCodeRegex","checkDefaults","checkParams","checkProperties","noDefaultExampleRules","checkEslintrc","matchingFileName","matchingFileNameDefaults","matchingFileNameParams","matchingFileNameProperties","paddedIndent","baseConfig","configFile","allowInlineConfig","reportUnusedDisableDirectives","captionRequired","rulePaths","mdRules","undefined","expressionRules","checkSource","filename","defaultFileName","rules","lines","cols","skipInit","source","targetTagName","sources","tag","line","push","nonJSPrefacingCols","nonJSPrefacingLines","string","checkRules","cliConfig","useEslintrc","cliConfigStr","JSON","stringify","src","fileNameMapKey","file","cliFile","cli","CLIEngine","config","getConfigForFile","results","messages","executeOnText","number","codeStartLine","codeStartCol","forEach","message","column","severity","ruleId","startLine","startCol","getFilenameInfo","ext","jsFileName","getFilename","includes","filenameInfo","forEachPreferredTag","description","trim","default","tagName","getPreferredTagName","hasTag","matchingFilenameInfo","tokens","postTag","test","startingIndex","lastStringCount","exampleCode","lastIndex","exec","index","n0","n1","preMatch","preMatchLines","nonJSPreface","nonJSPrefaceLineCount","idx","indexOf","charsInLastLine","global","iterateAllJsdocs","meta","docs","url","schema","additionalProperties","properties","type"],"mappings":"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","sourcesContent":["// Todo: When peerDeps bump to ESLint 7, see about replacing `CLIEngine`\n//  with non-deprecated `ESLint` class:\n// https://github.com/eslint/eslint/blob/master/docs/user-guide/migrating-to-7.0.0.md#-the-cliengine-class-has-been-deprecated\nimport {\n  CLIEngine,\n} from 'eslint';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst zeroBasedLineIndexAdjust = -1;\nconst likelyNestedJSDocIndentSpace = 1;\nconst preTagSpaceLength = 1;\n\n// If a space is present, we should ignore it\nconst firstLinePrefixLength = preTagSpaceLength;\n\nconst hasCaptionRegex = /^\\s*<caption>([\\s\\S]*?)<\\/caption>/u;\n\nconst escapeStringRegexp = (str) => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n};\nconst countChars = (str, ch) => {\n  return (str.match(new RegExp(escapeStringRegexp(ch), 'gu')) || []).length;\n};\n\nconst getRegexFromString = (regexString) => {\n  const match = regexString.match(/^\\/(.*)\\/([gimyus]*)$/u);\n  let flags = 'u';\n  let regex = regexString;\n  if (match) {\n    [, regex, flags] = match;\n    if (!flags) {\n      flags = 'u';\n    }\n    const uniqueFlags = [...new Set(flags)];\n    flags = uniqueFlags.join('');\n  }\n\n  return new RegExp(regex, flags);\n};\n\nconst defaultMdRules = {\n  // \"always\" newline rule at end unlikely in sample code\n  'eol-last': 0,\n\n  // Wouldn't generally expect example paths to resolve relative to JS file\n  'import/no-unresolved': 0,\n\n  // Snippets likely too short to always include import/export info\n  'import/unambiguous': 0,\n\n  'jsdoc/require-file-overview': 0,\n\n  // The end of a multiline comment would end the comment the example is in.\n  'jsdoc/require-jsdoc': 0,\n\n  // Unlikely to have inadvertent debugging within examples\n  'no-console': 0,\n\n  // Often wish to start `@example` code after newline; also may use\n  //   empty lines for spacing\n  'no-multiple-empty-lines': 0,\n\n  // Many variables in examples will be `undefined`\n  'no-undef': 0,\n\n  // Common to define variables for clarity without always using them\n  'no-unused-vars': 0,\n\n  // See import/no-unresolved\n  'node/no-missing-import': 0,\n  'node/no-missing-require': 0,\n\n  // Can generally look nicer to pad a little even if code imposes more stringency\n  'padded-blocks': 0,\n};\n\nconst defaultExpressionRules = {\n  ...defaultMdRules,\n  'no-new': 'off',\n  'no-unused-expressions': 'off',\n  quotes: ['error', 'double'],\n  semi: ['error', 'never'],\n  strict: 'off',\n};\n\nconst getLinesCols = (text) => {\n  const matchLines = countChars(text, '\\n');\n\n  const colDelta = matchLines ?\n    text.slice(text.lastIndexOf('\\n') + 1).length :\n    text.length;\n\n  return [matchLines, colDelta];\n};\n\nexport default iterateJsdoc(({\n  report,\n  utils,\n  context,\n  globalState,\n}) => {\n  if (!globalState.has('checkExamples-matchingFileName')) {\n    globalState.set('checkExamples-matchingFileName', new Map());\n  }\n  const matchingFileNameMap = globalState.get('checkExamples-matchingFileName');\n\n  const options = context.options[0] || {};\n  let {\n    exampleCodeRegex = null,\n    rejectExampleCodeRegex = null,\n  } = options;\n  const {\n    checkDefaults = false,\n    checkParams = false,\n    checkProperties = false,\n    noDefaultExampleRules = false,\n    checkEslintrc = true,\n    matchingFileName = null,\n    matchingFileNameDefaults = null,\n    matchingFileNameParams = null,\n    matchingFileNameProperties = null,\n    paddedIndent = 0,\n    baseConfig = {},\n    configFile,\n    allowInlineConfig = true,\n    reportUnusedDisableDirectives = true,\n    captionRequired = false,\n  } = options;\n\n  // Make this configurable?\n  const rulePaths = [];\n\n  const mdRules = noDefaultExampleRules ? undefined : defaultMdRules;\n\n  const expressionRules = noDefaultExampleRules ? undefined : defaultExpressionRules;\n\n  if (exampleCodeRegex) {\n    exampleCodeRegex = getRegexFromString(exampleCodeRegex);\n  }\n  if (rejectExampleCodeRegex) {\n    rejectExampleCodeRegex = getRegexFromString(rejectExampleCodeRegex);\n  }\n\n  const checkSource = ({\n    filename, defaultFileName,\n    rules = expressionRules,\n    lines = 0,\n    cols = 0,\n    skipInit, source, targetTagName, sources = [], tag = {line: 0},\n  }) => {\n    if (!skipInit) {\n      sources.push({\n        nonJSPrefacingCols: cols,\n        nonJSPrefacingLines: lines,\n        string: source,\n      });\n    }\n\n    // Todo: Make fixable\n    // Todo: Fix whitespace indent\n    const checkRules = function ({\n      nonJSPrefacingCols,\n      nonJSPrefacingLines,\n      string,\n    }) {\n      const cliConfig = {\n        allowInlineConfig,\n        baseConfig,\n        configFile,\n        reportUnusedDisableDirectives,\n        rulePaths,\n        rules,\n        useEslintrc: checkEslintrc,\n      };\n      const cliConfigStr = JSON.stringify(cliConfig);\n\n      const src = paddedIndent ?\n        string.replace(new RegExp(`(^|\\n) {${paddedIndent}}(?!$)`, 'gu'), '\\n') :\n        string;\n\n      // Programmatic ESLint API: https://eslint.org/docs/developer-guide/nodejs-api\n      const fileNameMapKey = filename ?\n        'a' + cliConfigStr + filename :\n        'b' + cliConfigStr + defaultFileName;\n      const file = filename || defaultFileName;\n      let cliFile;\n      if (matchingFileNameMap.has(fileNameMapKey)) {\n        cliFile = matchingFileNameMap.get(fileNameMapKey);\n      } else {\n        const cli = new CLIEngine(cliConfig);\n        let config;\n        if (filename || checkEslintrc) {\n          config = cli.getConfigForFile(file);\n        }\n\n        // We need a new instance to ensure that the rules that may only\n        //  be available to `file` (if it has its own `.eslintrc`),\n        //  will be defined.\n        cliFile = new CLIEngine({\n          allowInlineConfig,\n          baseConfig: {\n            ...baseConfig,\n            ...config,\n          },\n          configFile,\n          reportUnusedDisableDirectives,\n          rulePaths,\n          rules,\n          useEslintrc: false,\n        });\n        matchingFileNameMap.set(fileNameMapKey, cliFile);\n      }\n\n      const {results: [{messages}]} =\n        cliFile.executeOnText(src);\n\n      if (!('line' in tag)) {\n        tag.line = tag.source[0].number;\n      }\n\n      // NOTE: `tag.line` can be 0 if of form `/** @tag ... */`\n      const codeStartLine = tag.line + nonJSPrefacingLines;\n      const codeStartCol = likelyNestedJSDocIndentSpace;\n\n      messages.forEach(({message, line, column, severity, ruleId}) => {\n        const startLine = codeStartLine + line + zeroBasedLineIndexAdjust;\n        const startCol = codeStartCol + (\n\n          // This might not work for line 0, but line 0 is unlikely for examples\n          line <= 1 ? nonJSPrefacingCols + firstLinePrefixLength : preTagSpaceLength\n        ) + column;\n\n        report(\n          '@' + targetTagName + ' ' + (severity === 2 ? 'error' : 'warning') +\n            (ruleId ? ' (' + ruleId + ')' : '') + ': ' +\n            message,\n          null,\n          {\n            column: startCol,\n            line: startLine,\n          },\n        );\n      });\n    };\n\n    sources.forEach(checkRules);\n  };\n\n  const getFilenameInfo = (filename, ext = 'md') => {\n    let defaultFileName;\n    if (!filename) {\n      const jsFileName = context.getFilename();\n      if (typeof jsFileName === 'string' && jsFileName.includes('.')) {\n        defaultFileName = jsFileName.replace(/\\..*?$/, `.${ext}`);\n      } else {\n        defaultFileName = `dummy.${ext}`;\n      }\n    }\n\n    return {\n      defaultFileName,\n      filename,\n    };\n  };\n\n  if (checkDefaults) {\n    const filenameInfo = getFilenameInfo(matchingFileNameDefaults, 'jsdoc-defaults');\n    utils.forEachPreferredTag('default', (tag, targetTagName) => {\n      if (!tag.description.trim()) {\n        return;\n      }\n      checkSource({\n        source: `(${tag.description})`,\n        targetTagName,\n        ...filenameInfo,\n      });\n    });\n  }\n  if (checkParams) {\n    const filenameInfo = getFilenameInfo(matchingFileNameParams, 'jsdoc-params');\n    utils.forEachPreferredTag('param', (tag, targetTagName) => {\n      if (!tag.default || !tag.default.trim()) {\n        return;\n      }\n      checkSource({\n        source: `(${tag.default})`,\n        targetTagName,\n        ...filenameInfo,\n      });\n    });\n  }\n  if (checkProperties) {\n    const filenameInfo = getFilenameInfo(matchingFileNameProperties, 'jsdoc-properties');\n    utils.forEachPreferredTag('property', (tag, targetTagName) => {\n      if (!tag.default || !tag.default.trim()) {\n        return;\n      }\n      checkSource({\n        source: `(${tag.default})`,\n        targetTagName,\n        ...filenameInfo,\n      });\n    });\n  }\n\n  const tagName = utils.getPreferredTagName({tagName: 'example'});\n  if (!utils.hasTag(tagName)) {\n    return;\n  }\n\n  const matchingFilenameInfo = getFilenameInfo(matchingFileName);\n\n  utils.forEachPreferredTag('example', (tag, targetTagName) => {\n    let source = tag.source[0].tokens.postTag.slice(1) + tag.description;\n    const match = source.match(hasCaptionRegex);\n\n    if (captionRequired && (!match || !match[1].trim())) {\n      report('Caption is expected for examples.', null, tag);\n    }\n\n    source = source.replace(hasCaptionRegex, '');\n    const [lines, cols] = match ? getLinesCols(match[0]) : [0, 0];\n\n    if (exampleCodeRegex && !exampleCodeRegex.test(source) ||\n      rejectExampleCodeRegex && rejectExampleCodeRegex.test(source)\n    ) {\n      return;\n    }\n\n    const sources = [];\n    let skipInit = false;\n    if (exampleCodeRegex) {\n      let nonJSPrefacingCols = 0;\n      let nonJSPrefacingLines = 0;\n\n      let startingIndex = 0;\n      let lastStringCount = 0;\n\n      let exampleCode;\n      exampleCodeRegex.lastIndex = 0;\n      while ((exampleCode = exampleCodeRegex.exec(source)) !== null) {\n        const {index, 0: n0, 1: n1} = exampleCode;\n\n        // Count anything preceding user regex match (can affect line numbering)\n        const preMatch = source.slice(startingIndex, index);\n\n        const [preMatchLines, colDelta] = getLinesCols(preMatch);\n\n        let nonJSPreface;\n        let nonJSPrefaceLineCount;\n        if (n1) {\n          const idx = n0.indexOf(n1);\n          nonJSPreface = n0.slice(0, idx);\n          nonJSPrefaceLineCount = countChars(nonJSPreface, '\\n');\n        } else {\n          nonJSPreface = '';\n          nonJSPrefaceLineCount = 0;\n        }\n\n        nonJSPrefacingLines += lastStringCount + preMatchLines + nonJSPrefaceLineCount;\n\n        // Ignore `preMatch` delta if newlines here\n        if (nonJSPrefaceLineCount) {\n          const charsInLastLine = nonJSPreface.slice(nonJSPreface.lastIndexOf('\\n') + 1).length;\n\n          nonJSPrefacingCols += charsInLastLine;\n        } else {\n          nonJSPrefacingCols += colDelta + nonJSPreface.length;\n        }\n\n        const string = n1 || n0;\n        sources.push({\n          nonJSPrefacingCols,\n          nonJSPrefacingLines,\n          string,\n        });\n        startingIndex = exampleCodeRegex.lastIndex;\n        lastStringCount = countChars(string, '\\n');\n        if (!exampleCodeRegex.global) {\n          break;\n        }\n      }\n      skipInit = true;\n    }\n\n    checkSource({\n      cols,\n      lines,\n      rules: mdRules,\n      skipInit,\n      source,\n      sources,\n      tag,\n      targetTagName,\n      ...matchingFilenameInfo,\n    });\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Ensures that (JavaScript) examples within JSDoc adhere to ESLint rules.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-examples',\n    },\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          allowInlineConfig: {\n            default: true,\n            type: 'boolean',\n          },\n          baseConfig: {\n            type: 'object',\n          },\n          captionRequired: {\n            default: false,\n            type: 'boolean',\n          },\n          checkDefaults: {\n            default: false,\n            type: 'boolean',\n          },\n          checkEslintrc: {\n            default: true,\n            type: 'boolean',\n          },\n          checkParams: {\n            default: false,\n            type: 'boolean',\n          },\n          checkProperties: {\n            default: false,\n            type: 'boolean',\n          },\n          configFile: {\n            type: 'string',\n          },\n          exampleCodeRegex: {\n            type: 'string',\n          },\n          matchingFileName: {\n            type: 'string',\n          },\n          matchingFileNameDefaults: {\n            type: 'string',\n          },\n          matchingFileNameParams: {\n            type: 'string',\n          },\n          matchingFileNameProperties: {\n            type: 'string',\n          },\n          noDefaultExampleRules: {\n            default: false,\n            type: 'boolean',\n          },\n          paddedIndent: {\n            default: 0,\n            type: 'integer',\n          },\n          rejectExampleCodeRegex: {\n            type: 'string',\n          },\n          reportUnusedDisableDirectives: {\n            default: true,\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"checkExamples.js"}