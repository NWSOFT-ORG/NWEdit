/*
Creates the menu for PyPlus
Config is in the format:
"[cascade_name]": {}   <- A cascade OR
"item_name": [image, mnemonic, function, plugin_path]   <- An item in a cascade
----
The function should be a lambda call. You may use 'obj' to reference a class that uses the menu
The plugin_path should be a Python import string, with the object name.
For example: "path.to.class -> Object"
If it is a built-in, or a package installed with PyPlus, you can use direct import statements
For example: "package"
*/

{
    /*
    Main menubar (PyPlus, File, Edit...)
    Used by src.Editor
    */
    "main": {
        "[PyPlus]": {
            "About PyPlus": [
                "info",
                null,
                "AboutDialog(obj.master)",
                "src.Components.commondialog -> AboutDialog",
                false
            ],
            "[Settings]": {
                "General Settings": [
                    "gear",
                    "comma",
                    "obj.open_file(\"Config/general-settings.json\")",
                    null,
                    false
                ],
                "Run command settings": [
                    "gear",
                    null,
                    "obj.open_file(\"Config/cmd-settings.json\")",
                    null,
                    false
                ],
                "Lexer settings": [
                    "gear",
                    null,
                    "obj.open_file(\"Config/lexer-settings.json\")",
                    null,
                    false
                ],
                "Comment markers": [
                    "gear",
                    null,
                    "obj.open_file(\"Config/comment-markers.json\")",
                    null,
                    false
                ],
                "File types for New File": [
                    "gear",
                    null,
                    "obj.open_file(\"Config/file-extens.json\")",
                    null,
                    false
                ],
                "File icons": [
                    "gear",
                    null,
                    "obj.open_file(\"Config/file-icons.json\")",
                    null,
                    false
                ],
                "---": null,
                "[Backup Settings]": {
                    "Save Settings...": [
                        "save-as",
                        null,
                        "ZipSettings(obj.master).zipsettings()",
                        "src.SettingsParser.zip_settings -> ZipSettings",
                        false
                    ],
                    "Load Settings...": [
                        "open",
                        null,
                        "ZipSettings(obj.master).unzipsettings()",
                        "src.SettingsParser.zip_settings -> ZipSettings",
                        false
                    ]
                }
            },
            "---": null,
            "Quit": [
                "close",
                "q",
                "obj.exit()",
                null,
                false
            ]
        },
//        "[PyPlus]": {},
        "[File]": {
            "New...": [
                "new",
                "n",
                "obj.filetree.new_item()",
                null,
                false
            ],
            "[Open...]": {
                "Open File": [
                    "open",
                    "o",
                    "obj.open_file()",
                    null,
                    false
                ],
                "Open File in Hex": [
                    "open",
                    null,
                    "obj.open_hex()",
                    null,
                    false
                ],
                "Open Folder": [
                    "open",
                    "shift-o",
                    "obj.open_dir()",
                    null,
                    false
                ],
                "Clone From Git...": [
                    "clone",
                    null,
                    "obj.git(\"clone\")",
                    null,
                    false
                ]
            },
            "Save Copy to": [
                "save-as",
                "shift-s",
                "obj.save_as()",
                null,
                true
            ],
            "Close Tab": [
                "close",
                "w",
                "obj.close_tab()",
                null,
                true
            ],
            "Reload All": [
                "reload",
                null,
                "obj.reload()",
                null,
                true
            ]
        },
        "[Edit]": {
            "Undo": [
                "undo",
                "z",
                "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).undo()",
                "src.Components.tktext -> TextOpts",
                true
            ],
            "Redo": [
                "redo",
                "shift-z",
                "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).redo()",
                "src.Components.tktext -> TextOpts",
                true
            ],
            "Cut": [
                "cut",
                "x",
                "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).cut()",
                "src.Components.tktext -> TextOpts",
                true
            ],
            "Copy": [
                "copy",
                "c",
                "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).copy()",
                "src.Components.tktext -> TextOpts",
                true
            ],
            "Paste": [
                "paste",
                "v",
                "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).paste()",
                "src.Components.tktext -> TextOpts",
                true
            ],
            "Duplicate Line or Selected": [
                null,
                "d",
                "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).duplicate_line()",
                "src.Components.tktext -> TextOpts",
                true
            ],
            "[Indent...]": {
                "Indent": [
                    "indent",
                    "i",
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).indent(\"indent\")",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Unindent": [
                    "unindent",
                    "u",
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).indent(\"unindent\")",
                    "src.Components.tktext -> TextOpts",
                    true
                ]
            },
            "Join Lines": [
                null,
                null,
                "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).join_lines()",
                "src.Components.tktext -> TextOpts",
                true
            ],
            "[Case...]": {
                "Swap Case": [
                    null,
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).swap_case()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Upper Case": [
                    "upper",
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).upper_case()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Lower Case": [
                    "lower",
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).lower_case()",
                    "src.Components.tktext -> TextOpts",
                    true
                ]
            },
            "[Select...]": {
                "Select All": [
                    "sel-all",
                    "a",
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).select_all()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Select Line": [
                    null,
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).sel_line()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Select Word": [
                    null,
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).sel_word()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Select Previous Word": [
                    null,
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).sel_word_left()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Select Next Word": [
                    null,
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).sel_word_right()",
                    "src.Components.tktext -> TextOpts",
                    true
                ]
            },
            "[Delete...]": {
                "Delete Selected": [
                    "delete",
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).delete()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Delete Word": [
                    "delete",
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).delete()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Delete Previous Word": [
                    "delete",
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).delete()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Delete Next Word": [
                    "delete",
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).delete()",
                    "src.Components.tktext -> TextOpts",
                    true
                ]
            },
            "[Move line...]": {
                "Up": [
                    null,
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).mv_line_up()",
                    "src.Components.tktext -> TextOpts",
                    true
                ],
                "Down": [
                    null,
                    null,
                    "TextOpts(obj.master, keyaction=obj.key).set_text(obj.get_text).mv_line_dn()",
                    "src.Components.tktext -> TextOpts",
                    true
                ]
            }
        },
        "[Code]": {
            "Run": [
                "run",
                "b",
                "CodeFunctions(obj.master, obj.get_text, obj.bottom_tabs).run()",
                "src.codefunctions -> CodeFunctions",
                true
            ],
            "Lint": [
                "lint",
                null,
                "CodeFunctions(obj.master, obj.get_text, obj.bottom_tabs).lint_source()",
                "src.codefunctions -> CodeFunctions",
                true
            ],
            "Auto-Format": [
                "format",
                null,
                "CodeFunctions(obj.master, obj.get_text, obj.bottom_tabs).autopep()",
                "src.codefunctions -> CodeFunctions",
                true
            ],
            "[Open Shell...]": {
                "Open System Shell": [
                    "term",
                    null,
                    "CodeFunctions(obj.master, obj.get_text, obj.bottom_tabs).system_shell()",
                    "src.codefunctions -> CodeFunctions",
                    false
                ],
                "Open Python Shell": [
                    "py-term",
                    "F2",
                    "CodeFunctions(obj.master, obj.get_text, obj.bottom_tabs).python_shell()",
                    "src.codefunctions -> CodeFunctions",
                    false
                ]
            }
        },
        "[View]": {
            "Unit tests": [
                null,
                null,
                "TestDialog(obj.bottom_tabs, obj.filetree.path)",
                "src.Components.testdialog -> TestDialog",
                false
            ],
            "Code structure": [
                null,
                null,
                "CodeListDialog(obj.bottom_tabs, obj.get_text)",
                "src.Components.codelistdialog -> CodeListDialog",
                true
            ],
            "Insert Ascii Art": [
                null,
                null,
                "StyleWindow(obj.master, obj.get_text, obj.key)",
                "src.Components.textstyle -> StyleWindow",
                true
            ]
        },
        "[Navigate]": {
            "Go to...": [
                null,
                "shift-n",
                "Navigate(obj.get_text)",
                "src.Components.goto -> Navigate",
                true
            ],
            "Find and Replace": [
                "search",
                "f",
                "Search(obj.bottom_tabs, obj.get_text)",
                "src.Components.search -> Search",
                true
            ],
            "Search in Directory": [
                null,
                null,
                "SearchInDir(obj.bottom_tabs, obj.filetree.path, obj.open_file)",
                "src.Components.searchindir -> SearchInDir",
                false
            ]
        },
        "[Tools]": {
            "View Plugins": [
                "gear",
                null,
                "PluginView(obj.master)",
                "src.Plugins.plugins_view -> PluginView",
                false
            ]
        },
        "[Git]": {
            "Commit": [
                null,
                "shift-k",
                "obj.git(\"commit\")",
                null,
                false
            ],
            "Init": [
                null,
                null,
                "subprocess.Popen('git init && git add . && git commit -am \"Added files\"',hell=True,cwd=obj.filetree.path,)",
                "subprocess",
                false
            ]
        }
    },
    /*
    The menu shown on the start dialog (the modal to select projects to open)
    Used by src.Componentss.startdialog
    */
    "start_dialog": {
        "[PyPlus]": {
            "About PyPlus": [
                "info",
                null,
                "AboutDialog(obj.master)",
                "src.Components.commondialog -> AboutDialog",
                false
            ],
            "---": null,
            "Quit": [
                "close",
                "q",
                "sys.exit(0)",
                "sys",
                false
            ]
        },
        "[Project]": {
            "Open Project": [
                "open",
                "shift-o",
                "obj.open_project_dialog()",
                null,
                false
            ]
        }
    }
}